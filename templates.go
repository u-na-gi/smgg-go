package smgg

// コード生成のためのテンプレート

type GenSetterTemplate string

type TeplatePackageArg struct {
	PackageName string
}

const Ptempl GenSetterTemplate = `// Code generated by smggcli ; DO NOT EDIT.
package {{.PackageName}}
`

type TemplateFuncStructArg struct {
	TypeName string
}

const FuncUpsertStartTmpl GenSetterTemplate = `
// MergeUpsert{{.TypeName}} merges the source into the target. If an entry exists only in the source, it's added to the target.
// If an entry exists in both, the source's value overwrites the target's.
// Entries present in the target but not in the source are preserved.
// Both target and source must be of the same type.
func MergeUpsert{{.TypeName}}(target *{{.TypeName}}, source *{{.TypeName}}) *{{.TypeName}} {
`

const FuncUpsertAllowDeleteStartTmpl GenSetterTemplate = `
// MergeUpsertAllowDelete{{.TypeName}} merges the source object into the target object. If a value from the source object
// does not exist in the target object, it will be added. If the target object already contains
// a value from the source object, it will be overwritten with the value from the source object.
// Both the target and source objects must be of the same type.
func MergeUpsertAllowDelete{{.TypeName}}(target *{{.TypeName}}, source *{{.TypeName}}) *{{.TypeName}} {
`

type TemplateUpsertConditionStructArg struct {
	FieldName string
	ZeroValue string
}

const FuncUpsertConditionTmpl GenSetterTemplate = `
	if source.{{.FieldName}} != {{.ZeroValue}} {
		target.{{.FieldName}} = source.{{.FieldName}}
	}
`

const FuncUpsertAllowDeleteTmpl GenSetterTemplate = `
	target.{{.FieldName}} = source.{{.FieldName}}
`

const FuncEndTmpl GenSetterTemplate = `
	return target
}
`
